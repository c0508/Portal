@model ESGPlatform.Models.ViewModels.QuestionnaireResponseViewModel
@using ESGPlatform.Models.Entities

@{
    ViewData["Title"] = $"Answer Questionnaire - {Model.QuestionnaireTitle}";
}

@Html.AntiForgeryToken()

<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2><i class="bi bi-clipboard-data"></i> @Model.QuestionnaireTitle</h2>
                    <p class="text-muted mb-0">
                        Campaign: <strong>@Model.CampaignName</strong> | Version: <strong>@Model.VersionNumber</strong>
                        @if (Model.Deadline.HasValue)
                        {
                            <span> | Due: <strong class="@(Model.Deadline.Value < DateTime.Now ? "text-danger" : "")">@Model.Deadline.Value.ToString("MMM dd, yyyy")</strong></span>
                        }
                    </p>
                    @if (Model.Assignment.Campaign.ReportingPeriodStart.HasValue || Model.Assignment.Campaign.ReportingPeriodEnd.HasValue)
                    {
                        <div class="alert alert-info mt-2 mb-0 py-2">
                            <i class="bi bi-calendar-range me-1"></i>
                            <strong>Reporting Period:</strong>
                            @if (Model.Assignment.Campaign.ReportingPeriodStart.HasValue && Model.Assignment.Campaign.ReportingPeriodEnd.HasValue)
                            {
                                <span>@Model.Assignment.Campaign.ReportingPeriodStart.Value.ToString("MMM dd, yyyy") - @Model.Assignment.Campaign.ReportingPeriodEnd.Value.ToString("MMM dd, yyyy")</span>
                            }
                            else if (Model.Assignment.Campaign.ReportingPeriodStart.HasValue)
                            {
                                <span>From @Model.Assignment.Campaign.ReportingPeriodStart.Value.ToString("MMM dd, yyyy")</span>
                            }
                            else if (Model.Assignment.Campaign.ReportingPeriodEnd.HasValue)
                            {
                                <span>Until @Model.Assignment.Campaign.ReportingPeriodEnd.Value.ToString("MMM dd, yyyy")</span>
                            }
                            <small class="d-block mt-1 text-muted">Please provide responses for this time period.</small>
                        </div>
                    }
                </div>
                <div class="text-end">
                    <a asp-action="Index" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left"></i> Back to Dashboard
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Progress Bar -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h6 class="mb-0">Progress</h6>
                        <span class="text-muted">@Model.AnsweredQuestions / @Model.TotalQuestions questions answered</span>
                    </div>
                    <div class="progress" style="height: 10px;">
                        <div class="progress-bar @(Model.ProgressPercentage == 100 ? "bg-success" : "bg-primary")" 
                             style="width: @Model.ProgressPercentage%"></div>
                    </div>
                    <div class="mt-2 d-flex justify-content-between">
                        <small class="text-muted">@Model.ProgressPercentage% complete</small>
                        @if (Model.Status == AssignmentStatus.InProgress && Model.CanSubmit)
                        {
                            <form asp-action="ReviewSubmission" method="get" class="d-inline">
                                <input type="hidden" name="id" value="@Model.AssignmentId" />
                                <button type="submit" class="btn btn-success btn-sm">
                                    <i class="bi bi-check-circle"></i> Review & Submit
                                </button>
                            </form>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Model.Instructions))
    {
        <!-- Instructions -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="alert alert-info">
                    <h6><i class="bi bi-info-circle"></i> Instructions</h6>
                    <p class="mb-0">@Model.Instructions</p>
                </div>
            </div>
        </div>
    }

    <!-- Questions -->
    <div class="row">
        <div class="col-lg-9">
            @foreach (var question in Model.Questions.OrderBy(q => q.DisplayOrder))
            {
                <div class="card mb-4 conditional-question" id="question-@question.QuestionId" 
                     data-question-id="@question.QuestionId" 
                     style="@(question.IsConditionallyVisible ? "" : "display:none;")">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-start">
                            <div class="flex-grow-1">
                                <h6 class="mb-1">
                                    Question @question.DisplayOrder
                                    @if (question.IsRequired)
                                    {
                                        <span class="text-danger">*</span>
                                    }
                                </h6>
                                <p class="mb-0">@question.QuestionText</p>
                                @if (!string.IsNullOrEmpty(question.HelpText))
                                {
                                    <small class="text-muted">@question.HelpText</small>
                                }
                            </div>
                            <div class="ms-3">
                                @if (question.HasResponse)
                                {
                                    <span class="badge bg-success"><i class="bi bi-check"></i> Answered</span>
                                }
                                else if (question.IsDelegated)
                                {
                                    <span class="badge bg-warning"><i class="bi bi-share"></i> Delegated</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">Pending</span>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (question.IsDelegated && !question.IsDelegationCompleted)
                        {
                            <!-- Delegated Question -->
                            <div class="alert alert-warning">
                                <h6><i class="bi bi-share"></i> Question Delegated</h6>
                                <p class="mb-1">This question has been delegated to: <strong>@question.DelegatedToName</strong></p>
                                @if (!string.IsNullOrEmpty(question.DelegationInstructions))
                                {
                                    <p class="mb-1"><em>Instructions: "@question.DelegationInstructions"</em></p>
                                }
                                <small class="text-muted">Delegated on: @question.DelegatedAt?.ToString("MMM dd, yyyy")</small>
                            </div>
                        }
                        else if (Model.IsReadOnly)
                        {
                            <!-- Read-only View -->
                            <div class="bg-light p-3 rounded">
                                @await Html.PartialAsync("_QuestionResponseDisplay", question)
                            </div>
                        }
                        else
                        {
                            <!-- Editable Question -->
                            <form class="question-form" data-question-id="@question.QuestionId" data-assignment-id="@Model.AssignmentId">
                                @await Html.PartialAsync("_QuestionInput", question)
                                
                                <div class="d-flex justify-content-between align-items-center mt-3">
                                    <div>
                                        @if (question.CanDelegate && Model.Status == AssignmentStatus.InProgress)
                                        {
                                            <a asp-action="DelegateQuestion" asp-route-assignmentId="@Model.AssignmentId" asp-route-questionId="@question.QuestionId" 
                                               class="btn btn-outline-secondary btn-sm">
                                                <i class="bi bi-share"></i> Delegate
                                            </a>
                                        }
                                    </div>
                                    <div>
                                        <button type="button" class="btn btn-outline-danger btn-sm me-2 clear-response-btn" data-question-id="@question.QuestionId" data-assignment-id="@Model.AssignmentId" style="@(!question.HasResponse ? "display:none;" : "")">
                                            <i class="bi bi-trash"></i> Clear Answer
                                        </button>
                                        <button type="button" class="btn btn-primary btn-sm save-response-btn">
                                            <i class="bi bi-save"></i> Save Answer
                                        </button>
                                    </div>
                                </div>
                            </form>
                        }
                    </div>
                </div>
            }
        </div>
        
        <!-- Sidebar -->
        <div class="col-lg-3">
            <!-- Filtering Panel -->
            <div class="card mb-3 position-sticky" style="top: 20px;">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h6 class="mb-0"><i class="bi bi-funnel"></i> Filter Questions</h6>
                        <button type="button" class="btn btn-sm btn-outline-secondary" id="toggleFilters">
                            <i class="bi bi-chevron-up"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body" id="filterPanel">
                    <!-- Response Status Filter -->
                    <div class="mb-3">
                        <label class="form-label small fw-semibold">Response Status</label>
                        <select class="form-select form-select-sm" id="statusFilter">
                            <option value="all">All Questions</option>
                            <option value="answered">Answered Only</option>
                            <option value="unanswered">Unanswered Only</option>
                            <option value="required">Required Only</option>
                        </select>
                    </div>
                    
                    <!-- Question Type Filter -->
                    <div class="mb-3">
                        <label class="form-label small fw-semibold">Question Type</label>
                        <select class="form-select form-select-sm" id="typeFilter">
                            <option value="all">All Types</option>
                            <option value="Text">Text Input</option>
                            <option value="LongText">Long Text</option>
                            <option value="Number">Number</option>
                            <option value="Date">Date</option>
                            <option value="YesNo">Yes/No</option>
                            <option value="Radio">Radio Buttons</option>
                            <option value="Select">Dropdown</option>
                            <option value="MultiSelect">Multi-Select</option>
                            <option value="Checkbox">Checkbox</option>
                            <option value="FileUpload">File Upload</option>
                        </select>
                    </div>
                    
                    <!-- Text Search -->
                    <div class="mb-3">
                        <label class="form-label small fw-semibold">Search Questions</label>
                        <div class="input-group input-group-sm">
                            <input type="text" class="form-control" id="textSearch" placeholder="Search question text...">
                            <button class="btn btn-outline-secondary" type="button" id="clearSearch">
                                <i class="bi bi-x"></i>
                            </button>
                        </div>
                    </div>
                    
                    <!-- Section Filter -->
                    <div class="mb-3">
                        <label class="form-label small fw-semibold">Sections</label>
                        <div class="form-check-container" style="max-height: 120px; overflow-y: auto;">
                            @foreach (var sectionGroup in Model.Sections)
                            {
                                <div class="form-check form-check-sm">
                                    <input class="form-check-input section-filter" type="checkbox" 
                                           value="@sectionGroup.SectionName" id="section_@sectionGroup.SectionName.Replace(" ", "_")" checked>
                                    <label class="form-check-label small" for="section_@sectionGroup.SectionName.Replace(" ", "_")">
                                        @sectionGroup.SectionName <span class="text-muted">(@sectionGroup.TotalQuestions)</span>
                                    </label>
                                </div>
                            }
                        </div>
                    </div>
                    
                    <!-- Filter Actions -->
                    <div class="d-flex gap-2">
                        <button type="button" class="btn btn-sm btn-primary flex-fill" id="applyFilters">
                            <i class="bi bi-check"></i> Apply
                        </button>
                        <button type="button" class="btn btn-sm btn-secondary" id="resetFilters">
                            <i class="bi bi-arrow-clockwise"></i> Reset
                        </button>
                    </div>
                    
                    <!-- Filter Summary -->
                    <div class="mt-2 small text-muted" id="filterSummary">
                        Showing all questions
                    </div>
                </div>
            </div>
            
            <!-- Question Overview -->
            <div class="card position-sticky" style="top: 20px;">
                <div class="card-header">
                    <h6><i class="bi bi-list-check"></i> Question Overview</h6>
                </div>
                <div class="card-body p-0">
                    <div class="accordion accordion-flush" id="questionSections">
                        @foreach (var sectionGroup in Model.Sections)
                        {
                            var sectionId = "section_" + sectionGroup.SectionName.Replace(" ", "_").Replace(".", "_").Replace(",", "_");
                            var collapseId = "collapse_" + sectionId;
                            
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="heading_@sectionId">
                                    <button class="accordion-button @(sectionGroup == Model.Sections.First() ? "" : "collapsed")" 
                                            type="button" 
                                            data-bs-toggle="collapse" 
                                            data-bs-target="#@collapseId" 
                                            aria-expanded="@(sectionGroup == Model.Sections.First() ? "true" : "false")" 
                                            aria-controls="@collapseId">
                                        <div class="d-flex justify-content-between align-items-center w-100 me-3">
                                            <div class="d-flex align-items-center">
                                                <i class="@sectionGroup.StatusIconClass me-2"></i>
                                                <span class="fw-semibold">@sectionGroup.SectionName</span>
                                            </div>
                                            <div class="d-flex align-items-center">
                                                <small class="text-muted me-2">@sectionGroup.AnsweredQuestions/@sectionGroup.TotalQuestions</small>
                                                @if (sectionGroup.ProgressPercentage > 0)
                                                {
                                                    <div class="progress" style="width: 30px; height: 6px;">
                                                        <div class="progress-bar @(sectionGroup.IsCompleted ? "bg-success" : "bg-primary")" 
                                                             style="width: @sectionGroup.ProgressPercentage%"></div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </button>
                                </h2>
                                <div id="@collapseId" 
                                     class="accordion-collapse collapse @(sectionGroup == Model.Sections.First() ? "show" : "")" 
                                     aria-labelledby="heading_@sectionId" 
                                     data-bs-parent="#questionSections">
                                    <div class="accordion-body p-0">
                                        <div class="list-group list-group-flush">
                                            @foreach (var question in sectionGroup.Questions)
                                            {
                                                <a href="#question-@question.QuestionId" 
                                                   class="list-group-item list-group-item-action d-flex justify-content-between align-items-center border-0 py-2 px-3 question-nav-link"
                                                   data-question-id="@question.QuestionId">
                                                    <span class="small">
                                                        <span class="text-muted">Q@(question.DisplayOrder)</span>
                                                        <span class="ms-1">@(question.QuestionText.Length > 50 ? question.QuestionText.Substring(0, 50) + "..." : question.QuestionText)</span>
                                                    </span>
                                                    <div class="d-flex align-items-center">
                                                        @if (question.IsRequired)
                                                        {
                                                            <span class="badge bg-danger me-1" style="font-size: 8px; padding: 2px 4px;">REQ</span>
                                                        }
                                                        @if (question.HasResponse)
                                                        {
                                                            <i class="bi bi-check-circle text-success"></i>
                                                        }
                                                        else if (question.IsDelegated)
                                                        {
                                                            <i class="bi bi-share text-warning"></i>
                                                        }
                                                        else
                                                        {
                                                            <i class="bi bi-circle text-muted"></i>
                                                        }
                                                    </div>
                                                </a>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    
                    @if (Model.TeamMembers.Any())
                    {
                        <hr>
                        <h6><i class="bi bi-people"></i> Team Members</h6>
                        <div class="list-group list-group-flush">
                            @foreach (var member in Model.TeamMembers.Where(m => m.IsActive))
                            {
                                <div class="list-group-item">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h6 class="mb-1">@member.FullName</h6>
                                    </div>
                                    <small>@member.Email</small>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        $(document).ready(function() {
            // Auto-save responses
            $('.save-response-btn').click(function(e) {
                e.preventDefault();
                var form = $(this).closest('.question-form');
                saveResponse(form);
            });
            
            // Clear responses
            $('.clear-response-btn').click(function(e) {
                e.preventDefault();
                var btn = $(this);
                var questionId = btn.data('question-id');
                var assignmentId = btn.data('assignment-id');
                
                if (confirm('Are you sure you want to clear this answer? This action cannot be undone.')) {
                    clearResponse(questionId, assignmentId, btn);
                }
            });
            
            // Auto-save on input change (with debounce)
            var saveTimeout;
            $('.question-form input, .question-form textarea, .question-form select').on('input change', function() {
                clearTimeout(saveTimeout);
                var form = $(this).closest('.question-form');
                saveTimeout = setTimeout(function() {
                    saveResponse(form);
                }, 1000); // Save after 1 second of inactivity
            });
            
            function saveResponse(form) {
                var requestData = {
                    AssignmentId: form.data('assignment-id'),
                    QuestionId: form.data('question-id'),
                    TextValue: null,
                    NumericValue: null,
                    DateValue: null,
                    BooleanValue: null,
                    SelectedValues: []
                };
                
                // Get form values based on input types
                var inputs = form.find('input, textarea, select');
                inputs.each(function() {
                    var input = $(this);
                    var name = input.attr('name');
                    var type = input.attr('type');
                    var value = input.val();
                    
                    switch (name) {
                        case 'textValue':
                            if (type === 'radio') {
                                if (input.is(':checked')) {
                                    requestData.TextValue = value;
                                }
                            } else if (value && value.trim() !== '') {
                                requestData.TextValue = value;
                            }
                            break;
                        case 'numericValue':
                            if (value && value !== '') {
                                requestData.NumericValue = parseFloat(value) || null;
                            }
                            break;
                        case 'dateValue':
                            if (value && value !== '') {
                                requestData.DateValue = value;
                            }
                            break;
                        case 'booleanValue':
                            if (type === 'checkbox') {
                                requestData.BooleanValue = input.is(':checked');
                            } else if (type === 'radio' && input.is(':checked')) {
                                requestData.BooleanValue = value === 'true';
                            }
                            break;
                        case 'selectedValues':
                            if (type === 'checkbox' && input.is(':checked')) {
                                requestData.SelectedValues.push(value);
                            }
                            break;
                    }
                });
                
                // Clean up empty arrays
                if (requestData.SelectedValues.length === 0) {
                    requestData.SelectedValues = null;
                }
                
                // Debug logging
                console.log('Saving response:', requestData);
                
                // Show saving indicator
                var btn = form.find('.save-response-btn');
                var originalText = btn.html();
                btn.html('<i class="bi bi-arrow-clockwise spin"></i> Saving...').prop('disabled', true);
                
                $.ajax({
                    url: '@Url.Action("SaveResponse")',
                    type: 'POST',
                    data: $.extend(requestData, {
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    }),
                    success: function(response) {
                        if (response.success) {
                            btn.html('<i class="bi bi-check"></i> Saved').removeClass('btn-primary').addClass('btn-success');
                            setTimeout(function() {
                                btn.html(originalText).removeClass('btn-success').addClass('btn-primary').prop('disabled', false);
                            }, 2000);
                            
                            // Update question status badge
                            var questionCard = form.closest('.card');
                            var badge = questionCard.find('.badge');
                            if (badge.length && !badge.hasClass('bg-success')) {
                                badge.removeClass('bg-secondary bg-warning bg-danger')
                                     .addClass('bg-success')
                                     .html('<i class="bi bi-check"></i> Answered');
                            }
                            
                            // Update sidebar status
                            var sidebarLink = $('a[href="#question-' + form.data('question-id') + '"]');
                            if (sidebarLink.length) {
                                sidebarLink.find('i').removeClass('bi-circle bi-exclamation-circle text-danger text-muted')
                                          .addClass('bi-check-circle text-success');
                            }
                            
                            // Show clear button if it's hidden
                            var clearBtn = form.find('.clear-response-btn');
                            if (clearBtn.length && clearBtn.is(':hidden')) {
                                clearBtn.show();
                            }
                            
                            // Update progress bar
                            updateProgressBar();
                            
                            // Update section progress indicators
                            updateSectionProgress();
                            
                            // Check conditional questions after save
                            checkConditionalQuestions();
                        } else {
                            btn.html('<i class="bi bi-x"></i> Error').removeClass('btn-primary').addClass('btn-danger');
                            setTimeout(function() {
                                btn.html(originalText).removeClass('btn-danger').addClass('btn-primary').prop('disabled', false);
                            }, 3000);
                            console.error('Save failed:', response.message);
                            alert('Error saving response: ' + (response.message || 'Unknown error'));
                        }
                    },
                    error: function(xhr, status, error) {
                        btn.html('<i class="bi bi-x"></i> Error').removeClass('btn-primary').addClass('btn-danger');
                        setTimeout(function() {
                            btn.html(originalText).removeClass('btn-danger').addClass('btn-primary').prop('disabled', false);
                        }, 3000);
                        console.error('AJAX error:', status, error, xhr.responseText);
                        alert('Error saving response. Please try again.');
                    }
                });
            }
            
            function clearResponse(questionId, assignmentId, btn) {
                // Show clearing indicator
                var originalText = btn.html();
                btn.html('<i class="bi bi-arrow-clockwise spin"></i> Clearing...').prop('disabled', true);
                
                $.ajax({
                    url: '@Url.Action("ClearResponse")',
                    type: 'POST',
                    data: {
                        assignmentId: assignmentId,
                        questionId: questionId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        if (response.success) {
                            // Clear form inputs
                            var form = btn.closest('.question-form');
                            form.find('input, textarea, select').each(function() {
                                var input = $(this);
                                var type = input.attr('type');
                                
                                if (type === 'checkbox' || type === 'radio') {
                                    input.prop('checked', false);
                                } else {
                                    input.val('');
                                }
                            });
                            
                            // Update question status badge
                            var questionCard = form.closest('.card');
                            var badge = questionCard.find('.badge');
                            if (badge.length) {
                                badge.removeClass('bg-success')
                                     .addClass('bg-secondary')
                                     .html('Pending');
                            }
                            
                            // Update sidebar status
                            var sidebarLink = $('a[href="#question-' + questionId + '"]');
                            if (sidebarLink.length) {
                                var isRequired = form.find('input[required], textarea[required], select[required]').length > 0;
                                sidebarLink.find('i').removeClass('bi-check-circle text-success')
                                          .addClass(isRequired ? 'bi-exclamation-circle text-danger' : 'bi-circle text-muted');
                            }
                            
                            // Hide the clear button
                            btn.hide();
                            
                            // Update progress bar
                            updateProgressBar();
                            
                            // Update section progress indicators
                            updateSectionProgress();
                            
                            // Check conditional questions after clear
                            checkConditionalQuestions();
                            
                            // Show success message
                            btn.html('<i class="bi bi-check"></i> Cleared').removeClass('btn-outline-danger').addClass('btn-success');
                            setTimeout(function() {
                                btn.html(originalText).removeClass('btn-success').addClass('btn-outline-danger').prop('disabled', false);
                            }, 2000);
                        } else {
                            btn.html('<i class="bi bi-x"></i> Error').removeClass('btn-outline-danger').addClass('btn-danger');
                            setTimeout(function() {
                                btn.html(originalText).removeClass('btn-danger').addClass('btn-outline-danger').prop('disabled', false);
                            }, 3000);
                            console.error('Clear failed:', response.message);
                            alert('Error clearing response: ' + (response.message || 'Unknown error'));
                        }
                    },
                    error: function(xhr, status, error) {
                        btn.html('<i class="bi bi-x"></i> Error').removeClass('btn-outline-danger').addClass('btn-danger');
                        setTimeout(function() {
                            btn.html(originalText).removeClass('btn-danger').addClass('btn-outline-danger').prop('disabled', false);
                        }, 3000);
                        console.error('AJAX error:', status, error, xhr.responseText);
                        alert('Error clearing response. Please try again.');
                    }
                                 });
             }
             
             function updateProgressBar() {
                 // Count answered questions by checking for responses in forms
                 var totalQuestions = $('.question-form').length;
                 var answeredQuestions = 0;
                 
                 $('.question-form').each(function() {
                     var form = $(this);
                     var hasAnswer = false;
                     
                     // Check different input types for values
                     form.find('input, textarea, select').each(function() {
                         var input = $(this);
                         var type = input.attr('type');
                         var value = input.val();
                         
                         if (type === 'checkbox' || type === 'radio') {
                             if (input.is(':checked')) {
                                 hasAnswer = true;
                                 return false; // Break out of loop
                             }
                         } else if (value && value.trim() !== '') {
                             hasAnswer = true;
                             return false; // Break out of loop
                         }
                     });
                     
                     if (hasAnswer) {
                         answeredQuestions++;
                     }
                 });
                 
                 var percentage = totalQuestions > 0 ? Math.round((answeredQuestions / totalQuestions) * 100) : 0;
                 
                 // Update progress bar
                 $('.progress-bar').css('width', percentage + '%');
                 if (percentage === 100) {
                     $('.progress-bar').removeClass('bg-primary').addClass('bg-success');
                 } else {
                     $('.progress-bar').removeClass('bg-success').addClass('bg-primary');
                 }
                 
                 // Update progress text using more specific selectors
                 $('.d-flex.justify-content-between.align-items-center.mb-2 span.text-muted').text(answeredQuestions + ' / ' + totalQuestions + ' questions answered');
                 $('.mt-2.d-flex.justify-content-between small.text-muted').text(percentage + '% complete');
                 
                 // Show/hide submit button
                 var submitButton = $('.progress').parent().find('.mt-2 form');
                 if (percentage === 100 && answeredQuestions === totalQuestions) {
                     submitButton.show();
                 } else {
                     submitButton.hide();
                 }
             }
        });
        
        // Smooth scrolling for question navigation
        $('.question-nav-link').click(function(e) {
            e.preventDefault();
            var target = $(this.getAttribute('href'));
            if (target.length) {
                // Update active question highlighting
                $('.question-nav-link').removeClass('active');
                $(this).addClass('active');
                
                // Smooth scroll to question
                $('html, body').animate({
                    scrollTop: target.offset().top - 100
                }, 500);
                
                // Update section progress after scroll (small delay to ensure visibility)
                setTimeout(updateSectionProgress, 600);
            }
        });
        
        // Update section progress indicators when answers change
        function updateSectionProgress() {
            $('#questionSections .accordion-item').each(function() {
                var $sectionItem = $(this);
                var sectionQuestions = $sectionItem.find('.question-nav-link');
                var answeredCount = 0;
                var totalCount = sectionQuestions.length;
                
                sectionQuestions.each(function() {
                    var questionId = $(this).data('question-id');
                    var $questionCard = $('#question-' + questionId);
                    var hasAnswer = false;
                    
                    // Check if question has an answer
                    $questionCard.find('input, textarea, select').each(function() {
                        var input = $(this);
                        var type = input.attr('type');
                        var value = input.val();
                        
                        if (type === 'checkbox' || type === 'radio') {
                            if (input.is(':checked')) {
                                hasAnswer = true;
                                return false;
                            }
                        } else if (value && value.trim() !== '') {
                            hasAnswer = true;
                            return false;
                        }
                    });
                    
                    if (hasAnswer) {
                        answeredCount++;
                        $(this).find('.bi-circle').removeClass('bi-circle text-muted').addClass('bi-check-circle text-success');
                    } else {
                        $(this).find('.bi-check-circle').removeClass('bi-check-circle text-success').addClass('bi-circle text-muted');
                    }
                });
                
                // Update section header
                var progressPercent = totalCount > 0 ? Math.round((answeredCount / totalCount) * 100) : 0;
                var $progressBar = $sectionItem.find('.progress-bar');
                var $progressText = $sectionItem.find('small.text-muted');
                var $statusIcon = $sectionItem.find('.accordion-button i').first();
                
                // Update progress bar
                $progressBar.css('width', progressPercent + '%');
                if (progressPercent === 100) {
                    $progressBar.removeClass('bg-primary').addClass('bg-success');
                } else {
                    $progressBar.removeClass('bg-success').addClass('bg-primary');
                }
                
                // Update progress text
                $progressText.text(answeredCount + '/' + totalCount);
                
                // Update status icon
                if (progressPercent === 100) {
                    $statusIcon.removeClass('bi-circle-half bi-circle text-warning text-muted')
                              .addClass('bi-check-circle text-success');
                } else if (answeredCount > 0) {
                    $statusIcon.removeClass('bi-check-circle bi-circle text-success text-muted')
                              .addClass('bi-circle-half text-warning');
                } else {
                    $statusIcon.removeClass('bi-check-circle bi-circle-half text-success text-warning')
                              .addClass('bi-circle text-muted');
                }
            });
        }
        
        // Question Filtering Logic
        var originalQuestionCount = $('.conditional-question').length;
        
        // Toggle filter panel
        $('#toggleFilters').click(function() {
            var panel = $('#filterPanel');
            var icon = $(this).find('i');
            
            if (panel.is(':visible')) {
                panel.slideUp();
                icon.removeClass('bi-chevron-up').addClass('bi-chevron-down');
            } else {
                panel.slideDown();
                icon.removeClass('bi-chevron-down').addClass('bi-chevron-up');
            }
        });
        
        // Real-time text search
        $('#textSearch').on('input', function() {
            clearTimeout(window.searchTimeout);
            window.searchTimeout = setTimeout(applyFilters, 300);
        });
        
        // Clear search
        $('#clearSearch').click(function() {
            $('#textSearch').val('');
            applyFilters();
        });
        
        // Apply filters when dropdowns change
        $('#statusFilter, #typeFilter').change(function() {
            applyFilters();
        });
        
        // Apply filters when section checkboxes change
        $('.section-filter').change(function() {
            applyFilters();
        });
        
        // Apply filters button
        $('#applyFilters').click(function() {
            applyFilters();
        });
        
        // Reset filters button
        $('#resetFilters').click(function() {
            resetFilters();
        });
        
        function applyFilters() {
            var statusFilter = $('#statusFilter').val();
            var typeFilter = $('#typeFilter').val();
            var textSearch = $('#textSearch').val().toLowerCase();
            var selectedSections = $('.section-filter:checked').map(function() {
                return $(this).val();
            }).get();
            
            var visibleCount = 0;
            
            $('.conditional-question').each(function() {
                var $question = $(this);
                var questionId = $question.data('question-id');
                var questionText = $question.find('.card-header p').text().toLowerCase();
                var helpText = $question.find('.card-header small').text().toLowerCase();
                var isVisible = true;
                
                // Get question data from the form
                var form = $question.find('.question-form');
                var hasResponse = false;
                var isRequired = false;
                var questionType = '';
                var questionSection = '';
                
                // Check if question has response
                form.find('input, textarea, select').each(function() {
                    var input = $(this);
                    var type = input.attr('type');
                    var value = input.val();
                    
                    if (input.attr('required')) {
                        isRequired = true;
                    }
                    
                    if (type === 'checkbox' || type === 'radio') {
                        if (input.is(':checked')) {
                            hasResponse = true;
                        }
                    } else if (value && value.trim() !== '') {
                        hasResponse = true;
                    }
                });
                
                // Get question type from form elements
                if (form.find('input[type="radio"][name="booleanValue"]').length > 0) {
                    questionType = 'YesNo';
                } else if (form.find('input[type="radio"][name="textValue"]').length > 0) {
                    questionType = 'Radio';
                } else if (form.find('input[type="checkbox"][name="selectedValues"]').length > 0) {
                    questionType = 'MultiSelect';
                } else if (form.find('input[type="checkbox"][name="booleanValue"]').length > 0) {
                    questionType = 'Checkbox';
                } else if (form.find('select[name="textValue"]').length > 0) {
                    questionType = 'Select';
                } else if (form.find('textarea[name="textValue"]').length > 0) {
                    questionType = 'LongText';
                } else if (form.find('input[type="number"]').length > 0) {
                    questionType = 'Number';
                } else if (form.find('input[type="date"]').length > 0) {
                    questionType = 'Date';
                } else if (form.find('input[type="file"]').length > 0) {
                    questionType = 'FileUpload';
                } else {
                    questionType = 'Text';
                }
                
                // Get section from sidebar navigation
                var navLink = $('a[href="#question-' + questionId + '"]');
                if (navLink.length > 0) {
                    var sectionAccordion = navLink.closest('.accordion-item');
                    questionSection = sectionAccordion.find('.accordion-button .fw-semibold').text().trim();
                }
                
                // Apply status filter
                if (statusFilter !== 'all') {
                    switch (statusFilter) {
                        case 'answered':
                            if (!hasResponse) {
                                isVisible = false;
                            }
                            break;
                        case 'unanswered':
                            if (hasResponse) {
                                isVisible = false;
                            }
                            break;
                        case 'required':
                            if (!isRequired) {
                                isVisible = false;
                            }
                            break;
                    }
                }
                
                // Apply type filter
                if (typeFilter !== 'all' && questionType !== typeFilter) {
                    isVisible = false;
                }
                
                // Apply text search
                if (textSearch && !questionText.includes(textSearch) && !helpText.includes(textSearch)) {
                    isVisible = false;
                }
                
                // Apply section filter
                if (selectedSections.length > 0 && !selectedSections.includes(questionSection)) {
                    isVisible = false;
                }
                
                // Show/hide question with animation
                if (isVisible && $question.is(':hidden')) {
                    $question.slideDown(200);
                } else if (!isVisible && $question.is(':visible')) {
                    $question.slideUp(200);
                }
                
                if (isVisible) {
                    visibleCount++;
                }
            });
            
            // Update filter summary
            updateFilterSummary(visibleCount);
            
            // Update section progress after filtering
            setTimeout(updateSectionProgress, 250);
        }
        
        function resetFilters() {
            $('#statusFilter').val('all');
            $('#typeFilter').val('all');
            $('#textSearch').val('');
            $('.section-filter').prop('checked', true);
            
            // Show all questions
            $('.conditional-question').slideDown(200);
            
            // Update summary
            updateFilterSummary(originalQuestionCount);
            
            // Update section progress
            setTimeout(updateSectionProgress, 250);
        }
        
        function updateFilterSummary(visibleCount) {
            var summary = '';
            var totalCount = originalQuestionCount;
            
            if (visibleCount === totalCount) {
                summary = 'Showing all ' + totalCount + ' questions';
            } else {
                summary = 'Showing ' + visibleCount + ' of ' + totalCount + ' questions';
                
                // Add filter details
                var activeFilters = [];
                if ($('#statusFilter').val() !== 'all') {
                    activeFilters.push($('#statusFilter option:selected').text());
                }
                if ($('#typeFilter').val() !== 'all') {
                    activeFilters.push($('#typeFilter option:selected').text());
                }
                if ($('#textSearch').val()) {
                    activeFilters.push('Text: "' + $('#textSearch').val() + '"');
                }
                
                var uncheckedSections = $('.section-filter:not(:checked)');
                if (uncheckedSections.length > 0) {
                    activeFilters.push(uncheckedSections.length + ' section(s) hidden');
                }
                
                if (activeFilters.length > 0) {
                    summary += ' (' + activeFilters.join(', ') + ')';
                }
            }
            
            $('#filterSummary').text(summary);
        }
        
        // Initialize filters on page load
        $(document).ready(function() {
            updateFilterSummary(originalQuestionCount);
        });

        // Conditional Questions Logic
        function checkConditionalQuestions() {
            console.log('Checking conditional questions for assignment @Model.AssignmentId');
            
            $.ajax({
                url: '@Url.Action("GetQuestionVisibility", "Response")',
                type: 'POST',
                data: {
                    assignmentId: @Model.AssignmentId,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    console.log('Conditional questions response:', response);
                    
                    if (response.success) {
                        // Update question visibility
                        $('.conditional-question').each(function() {
                            var questionId = $(this).data('question-id');
                            var shouldShow = response.visibility[questionId];
                            
                            console.log('Question ' + questionId + ' should show: ' + shouldShow);
                            
                            if (shouldShow) {
                                $(this).slideDown(300);
                            } else {
                                $(this).slideUp(300);
                                // Clear answer when hiding question
                                $(this).find('input, textarea, select').val('').prop('checked', false);
                            }
                        });
                        
                        // Update progress after visibility changes
                        setTimeout(updateProgress, 350);
                        setTimeout(updateSectionProgress, 350);
                    } else {
                        console.error('Failed to get question visibility:', response.message);
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error checking conditional questions:', error);
                    console.error('Response:', xhr.responseText);
                }
            });
        }
        
        // Check conditional questions immediately for radio buttons, checkboxes, and selects
        // (these don't need to wait for auto-save since they change immediately)
        $('.question-form').on('change', 'input[type="radio"], input[type="checkbox"], select', function() {
            // For radio/checkbox/select, check immediately since the value is set instantly
            setTimeout(checkConditionalQuestions, 100);
        });
        
        // Initial check on page load
        $(document).ready(function() {
            setTimeout(checkConditionalQuestions, 1000);
        });
    </script>
    
    <style>
        .spin {
            animation: spin 1s linear infinite;
        }
        
        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .position-sticky {
            position: -webkit-sticky;
            position: sticky;
        }
        
        /* Section navigation styling */
        .question-nav-link {
            transition: all 0.2s ease;
            border-left: 3px solid transparent;
        }
        
        .question-nav-link:hover {
            background-color: #f8f9fa;
            border-left-color: #0d6efd;
        }
        
        .question-nav-link.active {
            background-color: #e7f3ff;
            border-left-color: #0d6efd;
            font-weight: 500;
        }
        
        .accordion-button {
            font-size: 0.9rem;
            padding: 0.75rem 1rem;
        }
        
        .accordion-button:not(.collapsed) {
            background-color: #f8f9fa;
            color: #212529;
            box-shadow: none;
        }
        
        .accordion-button:focus {
            box-shadow: none;
            border-color: #dee2e6;
        }
        
        .progress {
            border-radius: 10px;
        }
        
        .progress-bar {
            border-radius: 10px;
        }
        
        #questionSections .accordion-item {
            border: none;
            border-bottom: 1px solid #dee2e6;
        }
        
        #questionSections .accordion-item:last-child {
            border-bottom: none;
        }
        
        /* Filtering Panel Styles */
        #filterPanel {
            transition: all 0.3s ease;
        }
        
        .form-check-container {
            border: 1px solid #dee2e6;
            border-radius: 0.375rem;
            padding: 0.5rem;
            background-color: #f8f9fa;
        }
        
        .form-check-sm {
            margin-bottom: 0.25rem;
        }
        
        .form-check-sm:last-child {
            margin-bottom: 0;
        }
        
        .form-check-sm .form-check-input {
            margin-top: 0.125rem;
        }
        
        .form-check-sm .form-check-label {
            font-size: 0.875rem;
        }
        
        #filterSummary {
            background-color: #e7f3ff;
            padding: 0.375rem 0.5rem;
            border-radius: 0.25rem;
            border-left: 3px solid #0d6efd;
        }
        
        .input-group-sm .btn {
            font-size: 0.875rem;
        }
        
        /* Filter toggle button */
        #toggleFilters {
            border: none;
            background: transparent;
            padding: 0.25rem 0.5rem;
        }
        
        #toggleFilters:hover {
            background-color: rgba(0,0,0,0.05);
        }
        
        /* Smooth transitions for filtered questions */
        .conditional-question {
            transition: opacity 0.2s ease;
        }
        
        .conditional-question.filtering {
            opacity: 0.7;
        }
        
        /* Responsive adjustments */
        @@media (max-width: 991.98px) {
            .form-check-container {
                max-height: 80px;
            }
        }
    </style>
} 