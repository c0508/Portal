@model ESGPlatform.Models.ViewModels.QuestionResponseViewModel
@using ESGPlatform.Models.Entities

@switch (Model.QuestionType)
{
    case QuestionType.Text:
        <div class="form-group">
            <input type="text" class="form-control" value="@Model.TextValue" readonly />
        </div>
        break;

    case QuestionType.LongText:
        <div class="form-group">
            <textarea class="form-control" rows="4" readonly>@Model.TextValue</textarea>
        </div>
        break;

    case QuestionType.Number:
        <div class="form-group">
            @if (Model.Question?.IsPercentage == true)
            {
                <div class="input-group">
                    <input type="number" class="form-control" value="@Model.NumericValue" readonly />
                    <span class="input-group-text">%</span>
                </div>
            }
            else if (!string.IsNullOrEmpty(Model.Question?.Unit))
            {
                <div class="input-group">
                    <input type="number" class="form-control" value="@Model.NumericValue" readonly />
                    <span class="input-group-text">@Model.Question.Unit</span>
                </div>
            }
            else
            {
                <input type="number" class="form-control" value="@Model.NumericValue" readonly />
            }
        </div>
        break;

    case QuestionType.Date:
        <div class="form-group">
            <input type="date" class="form-control" value="@(Model.DateValue?.ToString("yyyy-MM-dd"))" readonly />
        </div>
        break;

    case QuestionType.YesNo:
        <div class="form-group">
            <div class="form-check form-check-inline">
                <input class="form-check-input" 
                       type="radio" 
                       id="yes_@(Model.QuestionId)_readonly" 
                       checked="@(Model.BooleanValue == true)"
                       disabled />
                <label class="form-check-label" for="yes_@(Model.QuestionId)_readonly">
                    Yes
                </label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" 
                       type="radio" 
                       id="no_@(Model.QuestionId)_readonly" 
                       checked="@(Model.BooleanValue == false)"
                       disabled />
                <label class="form-check-label" for="no_@(Model.QuestionId)_readonly">
                    No
                </label>
            </div>
        </div>
        break;

    case QuestionType.Radio:
        <div class="form-group">
            @if (Model.Options != null)
            {
                @foreach (var option in Model.Options)
                {
                    <div class="form-check">
                        <input class="form-check-input" 
                               type="radio" 
                               id="radio_@(Model.QuestionId)_@(option.Replace(" ", "_"))_readonly" 
                               checked="@(Model.TextValue == option)"
                               disabled />
                        <label class="form-check-label" for="radio_@(Model.QuestionId)_@(option.Replace(" ", "_"))_readonly">
                            @option
                        </label>
                    </div>
                }
            }
        </div>
        break;

    case QuestionType.Select:
        <div class="form-group">
            <select class="form-control" disabled>
                <option value="">-- Select an option --</option>
                @if (Model.Options != null)
                {
                    @foreach (var option in Model.Options)
                    {
                        <option value="@option" selected="@(Model.TextValue == option)">
                            @option
                        </option>
                    }
                }
            </select>
        </div>
        break;

    case QuestionType.MultiSelect:
        <div class="form-group">
            @if (Model.Options != null)
            {
                @foreach (var option in Model.Options)
                {
                    <div class="form-check">
                        <input class="form-check-input" 
                               type="checkbox" 
                               id="multi_@(Model.QuestionId)_@(option.Replace(" ", "_"))_readonly" 
                               checked="@(Model.SelectedValues?.Contains(option) == true)" 
                               disabled />
                        <label class="form-check-label" for="multi_@(Model.QuestionId)_@(option.Replace(" ", "_"))_readonly">
                            @option
                        </label>
                    </div>
                }
            }
        </div>
        break;

    case QuestionType.Checkbox:
        <div class="form-group">
            <div class="form-check">
                <input class="form-check-input" 
                       type="checkbox" 
                       id="checkbox_@(Model.QuestionId)_readonly" 
                       checked="@(Model.BooleanValue == true)"
                       disabled />
                <label class="form-check-label" for="checkbox_@(Model.QuestionId)_readonly">
                    @Model.QuestionText
                </label>
            </div>
        </div>
        break;

    case QuestionType.FileUpload:
        <div class="form-group">
            @if (Model.FileUploads != null && Model.FileUploads.Any())
            {
                <div class="list-group">
                    @foreach (var file in Model.FileUploads)
                    {
                        <div class="list-group-item d-flex justify-content-between align-items-center">
                            <div>
                                <i class="bi bi-file-earmark"></i>
                                <strong>@file.FileName</strong>
                                <span class="text-muted">(@file.FileSizeFormatted)</span>
                            </div>
                            <small class="text-muted">@file.UploadedAt.ToString("MMM dd, yyyy")</small>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-muted">
                    <i class="bi bi-file-earmark"></i> No files uploaded
                </div>
            }
        </div>
        break;

    default:
        <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle"></i>
            Unsupported question type: @Model.QuestionType
        </div>
        break;
} 