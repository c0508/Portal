@model ESGPlatform.Models.ViewModels.QuestionResponseViewModel
@using ESGPlatform.Models.Entities

@switch (Model.QuestionType)
{
    case QuestionType.Text:
        <div class="form-group">
            <input type="text" 
                   class="form-control" 
                   name="textValue" 
                   value="@Model.TextValue" 
                   placeholder="Enter your answer..."
                   required="@(Model.IsRequired)" />
        </div>
        break;

    case QuestionType.LongText:
        <div class="form-group">
            <textarea class="form-control" 
                      name="textValue" 
                      rows="4" 
                      placeholder="Enter your detailed answer..."
                      required="@(Model.IsRequired)">@Model.TextValue</textarea>
        </div>
        break;

    case QuestionType.Number:
        <div class="form-group">
            @if (Model.Question?.IsPercentage == true)
            {
                <div class="input-group">
                    <input type="number" 
                           class="form-control" 
                           name="numericValue" 
                           value="@(Model.NumericValue?.ToString("0.##", System.Globalization.CultureInfo.InvariantCulture))" 
                           step="0.01"
                           min="0"
                           max="100"
                           placeholder="Enter percentage (0-100)..."
                           required="@(Model.IsRequired)" />
                    <span class="input-group-text">%</span>
                </div>
            }
            else if (!string.IsNullOrEmpty(Model.Question?.Unit))
            {
                <div class="input-group">
                    <input type="number" 
                           class="form-control" 
                           name="numericValue" 
                           value="@(Model.NumericValue?.ToString("0.##", System.Globalization.CultureInfo.InvariantCulture))" 
                           step="0.01"
                           placeholder="Enter value..."
                           required="@(Model.IsRequired)" />
                    <span class="input-group-text">@Model.Question.Unit</span>
                </div>
            }
            else
            {
                <input type="number" 
                       class="form-control" 
                       name="numericValue" 
                       value="@(Model.NumericValue?.ToString("0.##", System.Globalization.CultureInfo.InvariantCulture))" 
                       step="0.01"
                       placeholder="Enter a number..."
                       required="@(Model.IsRequired)" />
            }
        </div>
        break;

    case QuestionType.Date:
        <div class="form-group">
            <input type="date" 
                   class="form-control" 
                   name="dateValue" 
                   value="@(Model.DateValue?.ToString("yyyy-MM-dd"))" 
                   required="@(Model.IsRequired)" />
        </div>
        break;

    case QuestionType.YesNo:
        <div class="form-group">
            <div class="form-check form-check-inline">
                <input class="form-check-input" 
                       type="radio" 
                       name="booleanValue" 
                       id="yes_@(Model.QuestionId)" 
                       value="true" 
                       checked="@(Model.BooleanValue == true)"
                       required="@(Model.IsRequired)" />
                <label class="form-check-label" for="yes_@(Model.QuestionId)">
                    Yes
                </label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" 
                       type="radio" 
                       name="booleanValue" 
                       id="no_@(Model.QuestionId)" 
                       value="false" 
                       checked="@(Model.BooleanValue == false)"
                       required="@(Model.IsRequired)" />
                <label class="form-check-label" for="no_@(Model.QuestionId)">
                    No
                </label>
            </div>
        </div>
        break;

    case QuestionType.Radio:
        <div class="form-group">
            @if (Model.Options != null)
            {
                @foreach (var option in Model.Options)
                {
                    <div class="form-check">
                        <input class="form-check-input" 
                               type="radio" 
                               name="textValue" 
                               id="radio_@(Model.QuestionId)_@(option.Replace(" ", "_"))" 
                               value="@option" 
                               checked="@(Model.TextValue == option)"
                               required="@(Model.IsRequired)" />
                        <label class="form-check-label" for="radio_@(Model.QuestionId)_@(option.Replace(" ", "_"))">
                            @option
                        </label>
                    </div>
                }
            }
        </div>
        break;

    case QuestionType.Select:
        <div class="form-group">
            <select class="form-control" 
                    name="textValue" 
                    required="@(Model.IsRequired)">
                <option value="">-- Select an option --</option>
                @if (Model.Options != null)
                {
                    @foreach (var option in Model.Options)
                    {
                        <option value="@option" selected="@(Model.TextValue == option)">
                            @option
                        </option>
                    }
                }
            </select>
        </div>
        break;

    case QuestionType.MultiSelect:
        <div class="form-group">
            @if (Model.Options != null)
            {
                @foreach (var option in Model.Options)
                {
                    <div class="form-check">
                        <input class="form-check-input" 
                               type="checkbox" 
                               name="selectedValues" 
                               id="multi_@(Model.QuestionId)_@(option.Replace(" ", "_"))" 
                               value="@option" 
                               checked="@(Model.SelectedValues?.Contains(option) == true)" />
                        <label class="form-check-label" for="multi_@(Model.QuestionId)_@(option.Replace(" ", "_"))">
                            @option
                        </label>
                    </div>
                }
            }
        </div>
        break;

    case QuestionType.Checkbox:
        <div class="form-group">
            <div class="form-check">
                <input class="form-check-input" 
                       type="checkbox" 
                       name="booleanValue" 
                       id="checkbox_@(Model.QuestionId)" 
                       value="true" 
                       checked="@(Model.BooleanValue == true)"
                       required="@(Model.IsRequired)" />
                <label class="form-check-label" for="checkbox_@(Model.QuestionId)">
                    @Model.QuestionText
                </label>
            </div>
        </div>
        break;

    case QuestionType.FileUpload:
        <div class="form-group">
            <input type="file" 
                   class="form-control" 
                   name="fileUpload" 
                   multiple 
                   accept=".pdf,.doc,.docx,.xls,.xlsx,.txt,.jpg,.jpeg,.png" />
            
            @if (Model.FileUploads != null && Model.FileUploads.Any())
            {
                <div class="mt-3">
                    <h6>Uploaded Files:</h6>
                    <div class="list-group">
                        @foreach (var file in Model.FileUploads)
                        {
                            <div class="list-group-item d-flex justify-content-between align-items-center">
                                <div>
                                    <i class="bi bi-file-earmark"></i>
                                    <strong>@file.FileName</strong>
                                    <span class="text-muted">(@file.FileSizeFormatted)</span>
                                </div>
                                <div>
                                    <small class="text-muted">@file.UploadedAt.ToString("MMM dd, yyyy")</small>
                                    <button type="button" class="btn btn-sm btn-outline-danger ms-2" onclick="removeFile(@file.Id)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
        break;

    default:
        <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle"></i>
            Unsupported question type: @Model.QuestionType
        </div>
        break;
}

@if (Model.IsRequired)
{
    <div class="invalid-feedback">
        This field is required.
    </div>
}

<script>
    function removeFile(fileId) {
        if (confirm('Are you sure you want to remove this file?')) {
            // Implementation for file removal
            // This would typically make an AJAX call to remove the file
            console.log('Remove file with ID:', fileId);
        }
    }
</script> 