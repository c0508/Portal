@model ESGPlatform.Models.Entities.OrganizationAttributeType

@{
    ViewData["Title"] = $"Manage {Model.Name} Values";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a asp-action="Index">Organization Attributes</a></li>
                <li class="breadcrumb-item active" aria-current="page">@Model.Name</li>
            </ol>
        </nav>
        <h2><i class="bi bi-tags me-2"></i>@Model.Name Values</h2>
        <p class="text-muted">@Model.Description</p>
    </div>
    <div>
        <a asp-action="CreateValue" asp-route-typeId="@Model.Id" class="btn btn-primary">
            <i class="bi bi-plus-circle"></i> Add Value
        </a>
    </div>
</div>

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">Values (@Model.Values.Count(v => v.IsActive))</h5>
                <div>
                    <span class="text-muted small">Drag to reorder</span>
                </div>
            </div>
            <div class="card-body">
                @if (Model.Values.Any(v => v.IsActive))
                {
                    <div id="valuesList" class="sortable-list">
                        @foreach (var value in Model.Values.Where(v => v.IsActive).OrderBy(v => v.DisplayOrder))
                        {
                            <div class="value-item" data-id="@value.Id">
                                <div class="d-flex justify-content-between align-items-center p-3 border rounded mb-2">
                                    <div class="d-flex align-items-center">
                                        <div class="drag-handle me-3">
                                            <i class="bi bi-grip-vertical text-muted"></i>
                                        </div>
                                        <div>
                                            @if (!string.IsNullOrEmpty(value.Color))
                                            {
                                                <span class="badge me-2" style="background-color: @value.Color;">
                                                    @value.Name
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary me-2">@value.Name</span>
                                            }
                                            <small class="text-muted">(@value.Code)</small>
                                            @if (!string.IsNullOrEmpty(value.Description))
                                            {
                                                <br><small class="text-muted">@value.Description</small>
                                            }
                                        </div>
                                    </div>
                                    <div class="btn-group">
                                        <a asp-action="EditValue" asp-route-id="@value.Id" class="btn btn-sm btn-outline-primary">
                                            <i class="bi bi-pencil"></i>
                                        </a>
                                        <form asp-action="DeleteValue" asp-route-id="@value.Id" method="post" class="d-inline" 
                                              onsubmit="return confirm('Are you sure you want to delete this value?')">
                                            <button type="submit" class="btn btn-sm btn-outline-danger">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center py-4">
                        <i class="bi bi-tag text-muted" style="font-size: 3rem;"></i>
                        <h5 class="mt-3 text-muted">No Values Defined</h5>
                        <p class="text-muted">Add values to this attribute type to get started.</p>
                        <a asp-action="CreateValue" asp-route-typeId="@Model.Id" class="btn btn-primary">
                            <i class="bi bi-plus-circle"></i> Add First Value
                        </a>
                    </div>
                }
            </div>
        </div>
    </div>
    
    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h5 class="card-title mb-0">Attribute Type Details</h5>
            </div>
            <div class="card-body">
                <dl class="row">
                    <dt class="col-sm-4">Code</dt>
                    <dd class="col-sm-8">@Model.Code</dd>
                    <dt class="col-sm-4">Name</dt>
                    <dd class="col-sm-8">@Model.Name</dd>
                    @if (!string.IsNullOrEmpty(Model.Description))
                    {
                        <dt class="col-sm-4">Description</dt>
                        <dd class="col-sm-8">@Model.Description</dd>
                    }
                    <dt class="col-sm-4">Status</dt>
                    <dd class="col-sm-8">
                        @if (Model.IsActive)
                        {
                            <span class="badge bg-success">Active</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">Inactive</span>
                        }
                    </dd>
                    <dt class="col-sm-4">Values</dt>
                    <dd class="col-sm-8">@Model.Values.Count(v => v.IsActive) active</dd>
                </dl>
                
                <div class="mt-3">
                    <a asp-action="EditType" asp-route-id="@Model.Id" class="btn btn-outline-primary btn-sm">
                        <i class="bi bi-pencil"></i> Edit Type
                    </a>
                </div>
            </div>
        </div>
        
        <div class="card mt-3">
            <div class="card-header">
                <h5 class="card-title mb-0">Quick Actions</h5>
            </div>
            <div class="card-body">
                <div class="d-grid gap-2">
                    <a asp-action="CreateValue" asp-route-typeId="@Model.Id" class="btn btn-primary btn-sm">
                        <i class="bi bi-plus-circle"></i> Add Value
                    </a>
                    <a asp-action="Index" class="btn btn-outline-secondary btn-sm">
                        <i class="bi bi-arrow-left"></i> Back to Attribute Types
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
    <script>
        $(document).ready(function () {
            // Initialize sortable list
            const valuesList = document.getElementById('valuesList');
            if (valuesList) {
                Sortable.create(valuesList, {
                    handle: '.drag-handle',
                    animation: 150,
                    onEnd: function (evt) {
                        // Update display orders
                        const items = valuesList.children;
                        const orders = {};
                        
                        for (let i = 0; i < items.length; i++) {
                            const itemId = parseInt(items[i].getAttribute('data-id'));
                            orders[itemId] = (i + 1) * 10; // Use increments of 10
                        }
                        
                        // Send to server
                        fetch('@Url.Action("ReorderValues")', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': $('[name="__RequestVerificationToken"]').val()
                            },
                            body: JSON.stringify(orders)
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Show success feedback
                                showToast('Order updated successfully', 'success');
                            } else {
                                showToast('Error updating order', 'error');
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            showToast('Error updating order', 'error');
                        });
                    }
                });
            }
        });
        
        function showToast(message, type) {
            // Simple toast notification
            const toast = $(`
                <div class="toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">${message}</div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                    </div>
                </div>
            `);
            
            // Add to page and show
            $('body').append('<div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 11"></div>');
            $('.toast-container').append(toast);
            const toastEl = new bootstrap.Toast(toast[0]);
            toastEl.show();
            
            // Remove after hiding
            toast.on('hidden.bs.toast', function () {
                $(this).remove();
            });
        }
    </script>
}

<style>
    .drag-handle {
        cursor: grab;
    }
    
    .drag-handle:active {
        cursor: grabbing;
    }
    
    .sortable-list .value-item {
        transition: all 0.2s ease;
    }
    
    .sortable-list .value-item:hover {
        background-color: #f8f9fa;
    }
    
    .sortable-list .value-item.sortable-chosen {
        opacity: 0.5;
    }
    
    .sortable-list .value-item.sortable-ghost {
        opacity: 0.3;
    }
</style> 